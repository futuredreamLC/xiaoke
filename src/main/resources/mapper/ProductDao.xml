<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoke.springboot.dao.ProductDao">

    <resultMap type="com.xiaoke.springboot.entity.Product" id="ProductMap">
        <id property="proId" column="pro_id"></id>
        <result property="proId" column="pro_id" jdbcType="INTEGER"/>
        <result property="typeId" column="type_id" jdbcType="INTEGER"/>
        <result property="proName" column="pro_name" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="proImage" column="pro_image" jdbcType="VARCHAR"/>
        <result property="proDate" column="pro_date" jdbcType="TIMESTAMP"/>
        <result property="sales" column="sales" jdbcType="INTEGER"/>
        <result property="stocks" column="stocks" jdbcType="INTEGER"/>
        <result property="proDescribe" column="pro_describe" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap type="com.xiaoke.springboot.entity.Product" id="ProductTypeMap">
        <id property="proId" column="pro_id"></id>
        <result property="proId" column="pro_id" jdbcType="INTEGER"/>
        <result property="typeId" column="type_id" jdbcType="INTEGER"/>
        <result property="proName" column="pro_name" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="proImage" column="pro_image" jdbcType="VARCHAR"/>
        <result property="proDate" column="pro_date" jdbcType="TIMESTAMP"/>
        <result property="sales" column="sales" jdbcType="INTEGER"/>
        <result property="stocks" column="stocks" jdbcType="INTEGER"/>
        <result property="proDescribe" column="pro_describe" jdbcType="VARCHAR"/>
        <association property="type" column="type_id" javaType="com.xiaoke.springboot.entity.Type">
            <id property="typeId" column="type_id"></id>
            <result property="typeId" column="type_id"></result>
            <result property="parentId" column="parent_id"></result>
            <result property="typename" column="typename"></result>
        </association>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="ProductTypeMap">
        select
        product.pro_id, product.type_id, product.pro_name, product.price, product.pro_image, product.pro_date, product.sales, product.stocks, product.pro_describe,type.parent_id,type.typename
        from product,type
        where product.type_id=type.type_id and product.pro_id=#{proId}
    </select>
    <!--根据类别Id查询产品-->
    <select id="queryByTypeId" resultMap="ProductMap">
        select
          pro_id, type_id, pro_name, price, pro_image, pro_date, sales, stocks, pro_describe
        from product
        where type_id=#{typeId}
    </select>
    <!--模糊查询产品-->
    <select id="queryByLike" resultMap="ProductMap">
        select
        product.pro_id, product.type_id, product.pro_name, product.price, product.pro_image, product.pro_date, product.sales, product.stocks, product.pro_describe,type.typename
        from product
        left join type on product.type_id=type.type_id
        where 1=1 and type.type_id=product.type_id
          <if test="keyWord !=null and keyWord !=''">
             and CONCAT(product.pro_id) like CONCAT('%',#{keyWord},'%')
             or CONCAT(product.pro_name) like CONCAT('%',#{keyWord},'%')
             or CONCAT(product.pro_describe) like CONCAT('%',#{keyWord},'%')
             or CONCAT(type.typename) like CONCAT('%',#{keyWord},'%')
          </if>
    </select>
    <!--查询所有的产品和它对应的类别-->
    <select id="queryAllPro" resultMap="ProductTypeMap">
        select
        product.pro_id, product.type_id, product.pro_name, product.price, product.pro_image, product.pro_date, product.sales, product.stocks, product.pro_describe,type.parent_id,type.typename
        from product,type
        where product.type_id=type.type_id
    </select>
    <!--根据父类id查询所有产品-->
    <select id="queryAllProByPid" resultMap="ProductTypeMap">
        select
        product.pro_id, product.type_id, product.pro_name, product.price, product.pro_image, product.pro_date, product.sales, product.stocks, product.pro_describe,type.parent_id,type.typename
        from product,type
        where product.type_id=type.type_id and type.parent_id=#{parentId}
    </select>
    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="ProductMap">
        select
          pro_id, type_id, pro_name, price, pro_image, pro_date, sales, stocks, pro_describe
        from xiaoke.product
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="ProductMap">
        select
          pro_id, type_id, pro_name, price, pro_image, pro_date, sales, stocks, pro_describe
        from xiaoke.product
        <where>
            <if test="proId != null">
                and pro_id = #{proId}
            </if>
            <if test="typeId != null">
                and type_id = #{typeId}
            </if>
            <if test="proName != null and proName != ''">
                and pro_name = #{proName}
            </if>
            <if test="price != null">
                and price = #{price}
            </if>
            <if test="proImage != null and proImage != ''">
                and pro_image = #{proImage}
            </if>
            <if test="proDate != null">
                and pro_date = #{proDate}
            </if>
            <if test="sales != null">
                and sales = #{sales}
            </if>
            <if test="stocks != null">
                and stocks = #{stocks}
            </if>
            <if test="proDescribe != null and proDescribe != ''">
                and pro_describe = #{proDescribe}
            </if>
        </where>
    </select>
    <select id="queryByName" resultMap="ProductMap">
        select
         pro_id, type_id, pro_name, price, pro_image, pro_date, sales, stocks, pro_describe
         from product
         where pro_name=#{proName}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="proId" useGeneratedKeys="true">
        insert into xiaoke.product(type_id, pro_name, price, pro_image, pro_date, stocks, pro_describe)
        values (#{typeId}, #{proName}, #{price}, #{proImage}, #{proDate}, #{stocks}, #{proDescribe})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update xiaoke.product
        <set>
            <if test="typeId != null">
                type_id = #{typeId},
            </if>
            <if test="proName != null and proName != ''">
                pro_name = #{proName},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="proImage != null and proImage != ''">
                pro_image = #{proImage},
            </if>
            <if test="proDate != null">
                pro_date = #{proDate},
            </if>
            <if test="sales != null">
                sales = #{sales},
            </if>
            <if test="stocks != null">
                stocks = #{stocks},
            </if>
            <if test="proDescribe != null and proDescribe != ''">
                pro_describe = #{proDescribe},
            </if>
        </set>
        where pro_id = #{proId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from xiaoke.product where pro_id = #{proId}
    </delete>

</mapper>